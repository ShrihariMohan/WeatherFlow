(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('rxjs/operators'), require('@angular/common/http')) :
    typeof define === 'function' && define.amd ? define('angular-svg-icon', ['exports', '@angular/core', '@angular/common', 'rxjs', 'rxjs/operators', '@angular/common/http'], factory) :
    (global = global || self, factory(global['angular-svg-icon'] = {}, global.ng.core, global.ng.common, global.rxjs, global.rxjs.operators, global.ng.common.http));
}(this, (function (exports, core, common, rxjs, operators, http) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, exports) {
        for (var p in m)
            if (p !== "default" && !exports.hasOwnProperty(p))
                __createBinding(exports, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (Object.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var SvgLoader = /** @class */ (function () {
        function SvgLoader() {
        }
        return SvgLoader;
    }());
    var SvgHttpLoader = /** @class */ (function (_super) {
        __extends(SvgHttpLoader, _super);
        function SvgHttpLoader(http) {
            var _this = _super.call(this) || this;
            _this.http = http;
            return _this;
        }
        SvgHttpLoader.prototype.getSvg = function (url) {
            return this.http.get(url, { responseType: 'text' });
        };
        return SvgHttpLoader;
    }(SvgLoader));
    SvgHttpLoader.decorators = [
        { type: core.Injectable }
    ];
    SvgHttpLoader.ctorParameters = function () { return [
        { type: http.HttpClient }
    ]; };

    var SERVER_URL = new core.InjectionToken('SERVER_URL');
    var SvgIconRegistryService = /** @class */ (function () {
        function SvgIconRegistryService(loader, platformId, serverUrl, _document) {
            this.loader = loader;
            this.platformId = platformId;
            this.serverUrl = serverUrl;
            this._document = _document;
            this.iconsByUrl = new Map();
            this.iconsLoadingByUrl = new Map();
            this.document = this._document;
        }
        /** Add a SVG to the registry by passing a name and the SVG. */
        SvgIconRegistryService.prototype.addSvg = function (name, data) {
            if (!this.iconsByUrl.has(name)) {
                var div = this.document.createElement('DIV');
                div.innerHTML = data;
                var svg = div.querySelector('svg');
                this.iconsByUrl.set(name, svg);
            }
        };
        /** Load a SVG to the registry from a URL. */
        SvgIconRegistryService.prototype.loadSvg = function (url, name) {
            var _this = this;
            if (name === void 0) { name = url; }
            // not sure if there should be a possibility to use name for server usage
            // so overriding it for now if provided
            // maybe should separate functionality for url and name use-cases
            if (this.serverUrl && url.match(/^(http(s)?):/) === null) {
                url = this.serverUrl + url;
                name = url;
            }
            if (this.iconsByUrl.has(name)) {
                return rxjs.of(this.iconsByUrl.get(name));
            }
            else if (this.iconsLoadingByUrl.has(name)) {
                return this.iconsLoadingByUrl.get(name);
            }
            var o = this.loader.getSvg(url).pipe(operators.map(function (svg) {
                var div = _this.document.createElement('DIV');
                div.innerHTML = svg;
                return div.querySelector('svg');
            }), operators.tap(function (svg) { return _this.iconsByUrl.set(name, svg); }), operators.catchError(function (err) {
                console.error(err);
                return rxjs.throwError(err);
            }), operators.finalize(function () { return _this.iconsLoadingByUrl.delete(name); }), operators.share());
            this.iconsLoadingByUrl.set(name, o);
            return o;
        };
        /** Get loaded SVG from registry by name. (also works by url because of blended map) */
        SvgIconRegistryService.prototype.getSvgByName = function (name) {
            if (this.iconsByUrl.has(name)) {
                return rxjs.of(this.iconsByUrl.get(name));
            }
            else if (this.iconsLoadingByUrl.has(name)) {
                return this.iconsLoadingByUrl.get(name);
            }
            return rxjs.throwError("No svg with name '" + name + "' has been loaded");
        };
        /** Remove a SVG from the registry by URL (or name). */
        SvgIconRegistryService.prototype.unloadSvg = function (url) {
            if (this.iconsByUrl.has(url)) {
                this.iconsByUrl.delete(url);
            }
        };
        return SvgIconRegistryService;
    }());
    SvgIconRegistryService.decorators = [
        { type: core.Injectable }
    ];
    SvgIconRegistryService.ctorParameters = function () { return [
        { type: SvgLoader },
        { type: Object, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] },
        { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [SERVER_URL,] }] },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] }
    ]; };
    function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry, loader, platformId, serverUrl, document) {
        return parentRegistry || new SvgIconRegistryService(loader, platformId, serverUrl, document);
    }
    var SVG_ICON_REGISTRY_PROVIDER = {
        provide: SvgIconRegistryService,
        deps: [[new core.Optional(), new core.SkipSelf(), SvgIconRegistryService], SvgLoader, [core.PLATFORM_ID],
            [new core.Optional(), SERVER_URL], [new core.Optional(), common.DOCUMENT]
        ],
        useFactory: SVG_ICON_REGISTRY_PROVIDER_FACTORY
    };

    var SvgIconComponent = /** @class */ (function () {
        function SvgIconComponent(element, differs, renderer, iconReg, cdr) {
            this.element = element;
            this.differs = differs;
            this.renderer = renderer;
            this.iconReg = iconReg;
            this.cdr = cdr;
            this.stretch = false;
            this.applyClass = false;
            /** @deprecated since 9.1.0 */
            this.applyCss = false;
            this.loaded = false;
        }
        Object.defineProperty(SvgIconComponent.prototype, "svgStyle", {
            // Adapted from ngStyle
            set: function (v) {
                this._svgStyle = v;
                if (!this.differ && v) {
                    this.differ = this.differs.find(v).create();
                }
            },
            enumerable: false,
            configurable: true
        });
        SvgIconComponent.prototype.ngOnInit = function () {
            this.init();
        };
        SvgIconComponent.prototype.ngOnDestroy = function () {
            this.destroy();
        };
        SvgIconComponent.prototype.ngOnChanges = function (changeRecord) {
            if (changeRecord.src || changeRecord.name) {
                if (this.loaded) {
                    this.destroy();
                }
                this.init();
            }
            if (changeRecord.stretch) {
                this.stylize();
            }
            if (changeRecord.applyClass) {
                if (this.applyClass) {
                    this.setClass(null, this.klass);
                }
                else {
                    this.setClass(this.klass, null);
                }
            }
            if (changeRecord.svgClass) {
                this.setClass(changeRecord.svgClass.previousValue, changeRecord.svgClass.currentValue);
            }
            if (changeRecord.klass) {
                if (this.applyClass) {
                    this.setClass(changeRecord.klass.previousValue, changeRecord.klass.currentValue);
                }
                else {
                    this.setClass(changeRecord.klass.previousValue, null);
                }
            }
            if (changeRecord.viewBox) {
                if (this.loaded) {
                    this.destroy();
                }
                this.init();
            }
            if (changeRecord.applyCss) {
                console.warn('applyCss deprecated since 9.1.0, will be removed in 10.0.0');
                console.warn('use applyClass instead');
            }
        };
        SvgIconComponent.prototype.ngDoCheck = function () {
            if (this.svg && this.differ) {
                var changes = this.differ.diff(this._svgStyle);
                if (changes) {
                    this.applyChanges(changes);
                }
            }
        };
        SvgIconComponent.prototype.init = function () {
            if (this.name) {
                this.icnSub = this.iconReg.getSvgByName(this.name).subscribe(this.initSvg.bind(this));
            }
            else if (this.src) {
                this.icnSub = this.iconReg.loadSvg(this.src).subscribe(this.initSvg.bind(this));
            }
            else {
                var elem = this.element.nativeElement;
                elem.innerHTML = '';
                this.cdr.markForCheck();
            }
        };
        SvgIconComponent.prototype.initSvg = function (svg) {
            if (!this.loaded) {
                this.setSvg(svg);
                this.resetDiffer();
            }
        };
        SvgIconComponent.prototype.destroy = function () {
            this.svg = undefined;
            this.differ = undefined;
            this.loaded = false;
            if (this.icnSub) {
                this.icnSub.unsubscribe();
            }
        };
        SvgIconComponent.prototype.resetDiffer = function () {
            if (this._svgStyle && !this.differ) {
                this.differ = this.differs.find(this._svgStyle).create();
            }
        };
        SvgIconComponent.prototype.setSvg = function (svg) {
            if (!this.loaded && svg) {
                this.svg = svg;
                var icon = svg.cloneNode(true);
                var elem = this.element.nativeElement;
                this.copyNgContentAttribute(elem, icon);
                if (this.klass && this.applyClass) {
                    this.renderer.setAttribute(icon, 'class', this.klass);
                }
                if (this.svgClass) {
                    this.renderer.setAttribute(icon, 'class', this.svgClass);
                }
                if (this.viewBox) {
                    if (this.viewBox === 'auto') {
                        // Attempt to convert height & width to a viewBox.
                        var w = icon.getAttribute('width');
                        var h = icon.getAttribute('height');
                        if (h && w) {
                            var vb = "0 0 " + w + " " + h;
                            this.renderer.setAttribute(icon, 'viewBox', vb);
                            this.renderer.removeAttribute(icon, 'width');
                            this.renderer.removeAttribute(icon, 'height');
                        }
                    }
                    else if (this.viewBox !== '') {
                        this.renderer.setAttribute(icon, 'viewBox', this.viewBox);
                        this.renderer.removeAttribute(icon, 'width');
                        this.renderer.removeAttribute(icon, 'height');
                    }
                }
                elem.innerHTML = '';
                this.renderer.appendChild(elem, icon);
                this.loaded = true;
                this.stylize();
                this.cdr.markForCheck();
            }
        };
        SvgIconComponent.prototype.copyNgContentAttribute = function (hostElem, icon) {
            var attributes = hostElem.attributes;
            var len = attributes.length;
            for (var i = 0; i < len; i += 1) {
                var attribute = attributes.item(i);
                if (attribute.name.startsWith('_ngcontent')) {
                    this.setNgContentAttribute(icon, attribute.name);
                    break;
                }
            }
        };
        SvgIconComponent.prototype.setNgContentAttribute = function (parent, attributeName) {
            this.renderer.setAttribute(parent, attributeName, '');
            var len = parent.childNodes.length;
            for (var i = 0; i < len; i += 1) {
                var child = parent.childNodes[i];
                if (child instanceof Element) {
                    this.setNgContentAttribute(child, attributeName);
                }
            }
        };
        SvgIconComponent.prototype.stylize = function () {
            if (this.svg) {
                var svg = this.element.nativeElement.firstChild;
                if (this.stretch === true) {
                    this.renderer.setAttribute(svg, 'preserveAspectRatio', 'none');
                }
                else if (this.stretch === false) {
                    this.renderer.removeAttribute(svg, 'preserveAspectRatio');
                }
            }
        };
        SvgIconComponent.prototype.applyChanges = function (changes) {
            var _this = this;
            changes.forEachRemovedItem(function (record) { return _this.setStyle(record.key, null); });
            changes.forEachAddedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
            changes.forEachChangedItem(function (record) { return _this.setStyle(record.key, record.currentValue); });
        };
        SvgIconComponent.prototype.setStyle = function (nameAndUnit, value) {
            var _a = __read(nameAndUnit.split('.'), 2), name = _a[0], unit = _a[1];
            value = value !== null && unit ? "" + value + unit : value;
            var svg = this.element.nativeElement.firstChild;
            if (value !== null) {
                this.renderer.setStyle(svg, name, value);
            }
            else {
                this.renderer.removeStyle(svg, name);
            }
        };
        SvgIconComponent.prototype.setClass = function (previous, current) {
            var e_1, _a;
            var svg = this.element.nativeElement.firstChild;
            if (svg) {
                if (previous) {
                    this.renderer.removeClass(svg, previous);
                }
                if (current) {
                    var klasses = current.split(' ');
                    try {
                        for (var klasses_1 = __values(klasses), klasses_1_1 = klasses_1.next(); !klasses_1_1.done; klasses_1_1 = klasses_1.next()) {
                            var k = klasses_1_1.value;
                            this.renderer.addClass(svg, k);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (klasses_1_1 && !klasses_1_1.done && (_a = klasses_1.return)) _a.call(klasses_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
        };
        return SvgIconComponent;
    }());
    SvgIconComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'svg-icon',
                    template: '<ng-content></ng-content>'
                },] }
    ];
    SvgIconComponent.ctorParameters = function () { return [
        { type: core.ElementRef },
        { type: core.KeyValueDiffers },
        { type: core.Renderer2 },
        { type: SvgIconRegistryService },
        { type: core.ChangeDetectorRef }
    ]; };
    SvgIconComponent.propDecorators = {
        src: [{ type: core.Input }],
        name: [{ type: core.Input }],
        stretch: [{ type: core.Input }],
        applyClass: [{ type: core.Input }],
        applyCss: [{ type: core.Input }],
        svgClass: [{ type: core.Input }],
        klass: [{ type: core.Input, args: ['class',] }],
        viewBox: [{ type: core.Input }],
        svgStyle: [{ type: core.Input }]
    };

    var AngularSvgIconModule = /** @class */ (function () {
        function AngularSvgIconModule() {
        }
        AngularSvgIconModule.forRoot = function (config) {
            if (config === void 0) { config = {}; }
            return {
                ngModule: AngularSvgIconModule,
                providers: [
                    SVG_ICON_REGISTRY_PROVIDER,
                    config.loader || { provide: SvgLoader, useClass: SvgHttpLoader }
                ]
            };
        };
        return AngularSvgIconModule;
    }());
    AngularSvgIconModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule,
                    ],
                    declarations: [
                        SvgIconComponent
                    ],
                    exports: [SvgIconComponent]
                },] }
    ];

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AngularSvgIconModule = AngularSvgIconModule;
    exports.SERVER_URL = SERVER_URL;
    exports.SVG_ICON_REGISTRY_PROVIDER = SVG_ICON_REGISTRY_PROVIDER;
    exports.SVG_ICON_REGISTRY_PROVIDER_FACTORY = SVG_ICON_REGISTRY_PROVIDER_FACTORY;
    exports.SvgHttpLoader = SvgHttpLoader;
    exports.SvgIconComponent = SvgIconComponent;
    exports.SvgIconRegistryService = SvgIconRegistryService;
    exports.SvgLoader = SvgLoader;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-svg-icon.umd.js.map
