{"version":3,"file":"svg-icon-registry.service.d.ts","sources":["svg-icon-registry.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { InjectionToken, Optional } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SvgLoader } from './svg-loader';\nexport declare const SERVER_URL: InjectionToken<string>;\nexport declare class SvgIconRegistryService {\n    private loader;\n    private platformId;\n    protected serverUrl: string;\n    private _document;\n    private document;\n    private iconsByUrl;\n    private iconsLoadingByUrl;\n    constructor(loader: SvgLoader, platformId: Object, serverUrl: string, _document: any);\n    /** Add a SVG to the registry by passing a name and the SVG. */\n    addSvg(name: string, data: string): void;\n    /** Load a SVG to the registry from a URL. */\n    loadSvg(url: string, name?: string): Observable<SVGElement>;\n    /** Get loaded SVG from registry by name. (also works by url because of blended map) */\n    getSvgByName(name: string): Observable<SVGElement>;\n    /** Remove a SVG from the registry by URL (or name). */\n    unloadSvg(url: string): void;\n}\nexport declare function SVG_ICON_REGISTRY_PROVIDER_FACTORY(parentRegistry: SvgIconRegistryService, loader: SvgLoader, platformId: object, serverUrl?: string, document?: any): SvgIconRegistryService;\nexport declare const SVG_ICON_REGISTRY_PROVIDER: {\n    provide: typeof SvgIconRegistryService;\n    deps: (typeof SvgLoader | Optional[])[];\n    useFactory: typeof SVG_ICON_REGISTRY_PROVIDER_FACTORY;\n};\n"]}