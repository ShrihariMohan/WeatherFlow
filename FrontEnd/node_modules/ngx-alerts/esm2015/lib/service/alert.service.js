import { Inject, Injectable } from '@angular/core';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { ALERT_CONFIG } from '../alert.config';
import { scan, take } from 'rxjs/operators';
import { AlertReducer } from './alert.reducer';
export class AlertService {
    constructor(config) {
        this.config = config;
        this.dispatcher = new Subject();
        this.state = new BehaviorSubject([]);
        this.initConfig();
        this.dispatcher
            .pipe(scan(AlertReducer.reduce, []))
            .subscribe(this.state);
    }
    initConfig() {
        if (!this.config) {
            this.config = {};
        }
        this.config.timeout = !!this.config.timeout ? this.config.timeout : 5000;
        this.config.maxMessages = !!this.config.maxMessages ? this.config.maxMessages : 5;
    }
    get messages() {
        return this.state.asObservable();
    }
    info(msg) {
        this.addAlert({ content: msg, type: 'info' });
    }
    danger(msg) {
        this.addAlert({ content: msg, type: 'danger' });
    }
    success(msg) {
        this.addAlert({ content: msg, type: 'success' });
    }
    warning(msg) {
        this.addAlert({ content: msg, type: 'warning' });
    }
    close(alert) {
        this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
    }
    addAlert(alert) {
        this.dispatcher.next({ fn: AlertReducer.add, alert: alert, config: this.config });
        if (this.config.timeout > 0) {
            timer(this.config.timeout)
                .pipe(take(1))
                .subscribe(() => {
                this.dispatcher.next({ fn: AlertReducer.remove, alert: alert, config: this.config });
            });
        }
    }
}
AlertService.decorators = [
    { type: Injectable }
];
AlertService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [ALERT_CONFIG,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxlcnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1hbGVydHMvc3JjL2xpYi9zZXJ2aWNlL2FsZXJ0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFDLGVBQWUsRUFBYyxPQUFPLEVBQUUsS0FBSyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUU3QyxPQUFPLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzFDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUc3QyxNQUFNLE9BQU8sWUFBWTtJQUt2QixZQUEwQyxNQUFtQjtRQUFuQixXQUFNLEdBQU4sTUFBTSxDQUFhO1FBSHJELGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBdUQsQ0FBQztRQUNoRixVQUFLLEdBQUcsSUFBSSxlQUFlLENBQVUsRUFBRSxDQUFDLENBQUM7UUFHL0MsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxVQUFVO2FBQ1osSUFBSSxDQUNILElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUM5QjthQUNBLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVPLFVBQVU7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FDbEI7UUFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDekUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDakIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ25DLENBQUM7SUFFTSxJQUFJLENBQUMsR0FBOEI7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxHQUE4QjtRQUMxQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFDLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRU0sT0FBTyxDQUFDLEdBQThCO1FBQzNDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTSxPQUFPLENBQUMsR0FBOEI7UUFDM0MsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFZO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDckYsQ0FBQztJQUVPLFFBQVEsQ0FBQyxLQUFZO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUMsRUFBRSxFQUFFLFlBQVksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFFaEYsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDM0IsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO2lCQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNiLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsRUFBQyxFQUFFLEVBQUUsWUFBWSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFDLENBQUMsQ0FBQztZQUNyRixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0gsQ0FBQzs7O1lBekRGLFVBQVU7Ozs0Q0FNSSxNQUFNLFNBQUMsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWxlcnR9IGZyb20gJy4uL21vZGVsL2FsZXJ0Lm1vZGVsJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlLCBTdWJqZWN0LCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0FMRVJUX0NPTkZJR30gZnJvbSAnLi4vYWxlcnQuY29uZmlnJztcbmltcG9ydCB7QWxlcnRDb25maWd9IGZyb20gJy4uL21vZGVsL2FsZXJ0LWNvbmZpZy5tb2RlbCc7XG5pbXBvcnQge3NjYW4sIHRha2V9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7QWxlcnRSZWR1Y2VyfSBmcm9tICcuL2FsZXJ0LnJlZHVjZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxlcnRTZXJ2aWNlIHtcblxuICBwcml2YXRlIGRpc3BhdGNoZXIgPSBuZXcgU3ViamVjdDx7IGZuOiBGdW5jdGlvbiwgYWxlcnQ6IEFsZXJ0LCBjb25maWc6IEFsZXJ0Q29uZmlnIH0+KCk7XG4gIHByaXZhdGUgc3RhdGUgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEFsZXJ0W10+KFtdKTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KEFMRVJUX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IEFsZXJ0Q29uZmlnKSB7XG4gICAgdGhpcy5pbml0Q29uZmlnKCk7XG4gICAgdGhpcy5kaXNwYXRjaGVyXG4gICAgICAucGlwZShcbiAgICAgICAgc2NhbihBbGVydFJlZHVjZXIucmVkdWNlLCBbXSlcbiAgICAgIClcbiAgICAgIC5zdWJzY3JpYmUodGhpcy5zdGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIGluaXRDb25maWcoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmNvbmZpZykge1xuICAgICAgdGhpcy5jb25maWcgPSB7fTtcbiAgICB9XG4gICAgdGhpcy5jb25maWcudGltZW91dCA9ICEhdGhpcy5jb25maWcudGltZW91dCA/IHRoaXMuY29uZmlnLnRpbWVvdXQgOiA1MDAwO1xuICAgIHRoaXMuY29uZmlnLm1heE1lc3NhZ2VzID0gISF0aGlzLmNvbmZpZy5tYXhNZXNzYWdlcyA/IHRoaXMuY29uZmlnLm1heE1lc3NhZ2VzIDogNTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgbWVzc2FnZXMoKTogT2JzZXJ2YWJsZTxBbGVydFtdPiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuYXNPYnNlcnZhYmxlKCk7XG4gIH1cblxuICBwdWJsaWMgaW5mbyhtc2c6IHN0cmluZyB8IHsgaHRtbDogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICdpbmZvJ30pO1xuICB9XG5cbiAgcHVibGljIGRhbmdlcihtc2c6IHN0cmluZyB8IHsgaHRtbDogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICdkYW5nZXInfSk7XG4gIH1cblxuICBwdWJsaWMgc3VjY2Vzcyhtc2c6IHN0cmluZyB8IHsgaHRtbDogc3RyaW5nIH0pOiB2b2lkIHtcbiAgICB0aGlzLmFkZEFsZXJ0KHtjb250ZW50OiBtc2csIHR5cGU6ICdzdWNjZXNzJ30pO1xuICB9XG5cbiAgcHVibGljIHdhcm5pbmcobXNnOiBzdHJpbmcgfCB7IGh0bWw6IHN0cmluZyB9KTogdm9pZCB7XG4gICAgdGhpcy5hZGRBbGVydCh7Y29udGVudDogbXNnLCB0eXBlOiAnd2FybmluZyd9KTtcbiAgfVxuXG4gIHB1YmxpYyBjbG9zZShhbGVydDogQWxlcnQpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7Zm46IEFsZXJ0UmVkdWNlci5yZW1vdmUsIGFsZXJ0OiBhbGVydCwgY29uZmlnOiB0aGlzLmNvbmZpZ30pO1xuICB9XG5cbiAgcHJpdmF0ZSBhZGRBbGVydChhbGVydDogQWxlcnQpOiB2b2lkIHtcbiAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7Zm46IEFsZXJ0UmVkdWNlci5hZGQsIGFsZXJ0OiBhbGVydCwgY29uZmlnOiB0aGlzLmNvbmZpZ30pO1xuXG4gICAgaWYgKHRoaXMuY29uZmlnLnRpbWVvdXQgPiAwKSB7XG4gICAgICB0aW1lcih0aGlzLmNvbmZpZy50aW1lb3V0KVxuICAgICAgICAucGlwZSh0YWtlKDEpKVxuICAgICAgICAuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgICAgICB0aGlzLmRpc3BhdGNoZXIubmV4dCh7Zm46IEFsZXJ0UmVkdWNlci5yZW1vdmUsIGFsZXJ0OiBhbGVydCwgY29uZmlnOiB0aGlzLmNvbmZpZ30pO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==